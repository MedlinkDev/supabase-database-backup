
\restrict 9uXl9TNmbRBw0H9BE9HGE1e5JeLbrMnMaec3ZUwpLCG9fzWVqdbTMBDAzvCpVA6


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Duplicated Questions" (
    "Question_id" bigint NOT NULL,
    "University_id" bigint NOT NULL,
    "Exam_id" bigint,
    "Question" "text",
    "Answer" "text",
    "Wrong1" "text",
    "Wrong2" "text",
    "Wrong3" "text",
    "Shared" boolean DEFAULT false,
    "index" smallint
);


ALTER TABLE "public"."Duplicated Questions" OWNER TO "postgres";


COMMENT ON TABLE "public"."Duplicated Questions" IS 'This table carries questions for universities';



COMMENT ON COLUMN "public"."Duplicated Questions"."Shared" IS 'If the questions are shared between (uni with no materials) ';



COMMENT ON COLUMN "public"."Duplicated Questions"."index" IS 'number of question';



ALTER TABLE "public"."Duplicated Questions" ALTER COLUMN "Question_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Duplicated Questions_Question_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Exams" (
    "Exam_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "Subject" "text",
    "University_id" bigint,
    "Enabled" boolean
);


ALTER TABLE "public"."Exams" OWNER TO "postgres";


COMMENT ON COLUMN "public"."Exams"."Enabled" IS 'If this is true = the university have Q&A';



ALTER TABLE "public"."Exams" ALTER COLUMN "Exam_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Exams_Exam_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Failed" (
    "id" bigint NOT NULL,
    "time" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uid" "text",
    "subject" "text",
    "Exam_id" bigint,
    "University_id" bigint,
    "index" smallint[],
    "score" smallint
);


ALTER TABLE "public"."Failed" OWNER TO "postgres";


COMMENT ON TABLE "public"."Failed" IS 'the user must repeat failed exams';



ALTER TABLE "public"."Failed" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Failed_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Materials" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "material_URL" "text",
    "University_id" smallint,
    "Materials name" "text"
);


ALTER TABLE "public"."Materials" OWNER TO "postgres";


COMMENT ON TABLE "public"."Materials" IS 'Represents the materials links';



ALTER TABLE "public"."Materials" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Materials_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."MedlinkStudentsDB" (
    "FailedTest" smallint DEFAULT '0'::smallint,
    "PassedTest" smallint DEFAULT '0'::smallint,
    "uid" "text" DEFAULT 'N/A'::"text" NOT NULL,
    "agreeState" smallint DEFAULT '0'::smallint,
    "display_name" "text" DEFAULT 'N/A'::"text",
    "email" "text" DEFAULT 'N/A'::"text",
    "index" smallint DEFAULT '1'::smallint,
    "matKey" smallint DEFAULT '0'::smallint,
    "phone_number" "text" DEFAULT 'N/A'::"text",
    "score" smallint DEFAULT '0'::smallint,
    "total" smallint DEFAULT '0'::smallint,
    "userUniversity" "text" DEFAULT 'N/A'::"text",
    "userUniversity1" "text" DEFAULT 'N/A'::"text",
    "userUniversity2" "text" DEFAULT 'N/A'::"text",
    "userUniversity3" "text" DEFAULT 'N/A'::"text",
    "userUniversity4" "text" DEFAULT 'N/A'::"text",
    "optionMat2" bigint,
    "optionMat3" bigint,
    "optionMat4" bigint,
    "University_id" bigint,
    "optionMat1" bigint,
    "hasMCQ" boolean DEFAULT false
);


ALTER TABLE "public"."MedlinkStudentsDB" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Questions" (
    "Question_id" bigint NOT NULL,
    "University_id" bigint NOT NULL,
    "Exam_id" bigint,
    "Question" "text",
    "Answer" "text",
    "Wrong1" "text",
    "Wrong2" "text",
    "Wrong3" "text",
    "Shared" boolean DEFAULT false,
    "index" smallint
);


ALTER TABLE "public"."Questions" OWNER TO "postgres";


COMMENT ON COLUMN "public"."Questions"."Shared" IS 'If the questions are shared between (uni with no materials) ';



COMMENT ON COLUMN "public"."Questions"."index" IS 'number of question';



ALTER TABLE "public"."Questions" ALTER COLUMN "Question_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Questions_Question_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Suceed" (
    "id" bigint NOT NULL,
    "time" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uid" "text",
    "subject" "text",
    "Exam_id" bigint,
    "University_id" bigint,
    "index" smallint[],
    "score" smallint
);


ALTER TABLE "public"."Suceed" OWNER TO "postgres";


ALTER TABLE "public"."Suceed" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Suceed_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Universities" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "Name" "text",
    "Enabled" boolean,
    "University_id" smallint NOT NULL,
    "optionMat2" bigint,
    "optionMat3" bigint,
    "optionMat4" bigint,
    "optionMat1" bigint,
    "isMedicine" boolean,
    "isDentistry" boolean,
    "isPharmacy" boolean,
    "isVeterinary" boolean,
    "isPreMed" boolean
);


ALTER TABLE "public"."Universities" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."University Details" (
    "id" bigint NOT NULL,
    "University_name" "text",
    "Country" "text",
    "Short Description" "text",
    "University_image" "text",
    "isMedicine" boolean,
    "isPreMed" boolean,
    "isPharmacy" boolean,
    "isVeterinary" boolean,
    "isDentistry" boolean
);


ALTER TABLE "public"."University Details" OWNER TO "postgres";


COMMENT ON TABLE "public"."University Details" IS 'This table is created for showing details about each University , all these data will be visible for the public users who want to sign up to the medlink students';



ALTER TABLE "public"."University Details" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."University Details_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."appVersion" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "newVersion" "text"
);


ALTER TABLE "public"."appVersion" OWNER TO "postgres";


COMMENT ON TABLE "public"."appVersion" IS 'Control app version';



ALTER TABLE "public"."appVersion" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."appVersion_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."rating" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uid" "text",
    "rateCooled" boolean,
    "rateConfirmed" boolean
);


ALTER TABLE "public"."rating" OWNER TO "postgres";


ALTER TABLE "public"."rating" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rating_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."usersCrmId" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uid" "text",
    "contactID" bigint,
    "hexValue" "text"
);


ALTER TABLE "public"."usersCrmId" OWNER TO "postgres";


COMMENT ON TABLE "public"."usersCrmId" IS 'this table is represented for the relation between contactID and the timeline convert';



COMMENT ON COLUMN "public"."usersCrmId"."hexValue" IS 'the value of hex after converting';



ALTER TABLE "public"."usersCrmId" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."usersCrmId_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."Duplicated Questions"
    ADD CONSTRAINT "Duplicated Questions_pkey" PRIMARY KEY ("Question_id");



ALTER TABLE ONLY "public"."Exams"
    ADD CONSTRAINT "Exams_pkey" PRIMARY KEY ("Exam_id");



ALTER TABLE ONLY "public"."Failed"
    ADD CONSTRAINT "Failed_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Materials"
    ADD CONSTRAINT "Materials_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."MedlinkStudentsDB"
    ADD CONSTRAINT "MedlinkStudentsDB_pkey" PRIMARY KEY ("uid");



ALTER TABLE ONLY "public"."Questions"
    ADD CONSTRAINT "Questions_pkey" PRIMARY KEY ("Question_id");



ALTER TABLE ONLY "public"."Suceed"
    ADD CONSTRAINT "Suceed_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Universities"
    ADD CONSTRAINT "Universities_optionMat1_key" UNIQUE ("optionMat1");



ALTER TABLE ONLY "public"."Universities"
    ADD CONSTRAINT "Universities_optionMat2_key" UNIQUE ("optionMat2");



ALTER TABLE ONLY "public"."Universities"
    ADD CONSTRAINT "Universities_optionMat3_key" UNIQUE ("optionMat3");



ALTER TABLE ONLY "public"."Universities"
    ADD CONSTRAINT "Universities_optionMat4_key" UNIQUE ("optionMat4");



ALTER TABLE ONLY "public"."Universities"
    ADD CONSTRAINT "Universities_pkey" PRIMARY KEY ("University_id");



ALTER TABLE ONLY "public"."University Details"
    ADD CONSTRAINT "University Details_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."appVersion"
    ADD CONSTRAINT "appVersion_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."rating"
    ADD CONSTRAINT "rating_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."usersCrmId"
    ADD CONSTRAINT "usersCrmId_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Duplicated Questions"
    ADD CONSTRAINT "Duplicated Questions_Exam_id_fkey" FOREIGN KEY ("Exam_id") REFERENCES "public"."Exams"("Exam_id");



ALTER TABLE ONLY "public"."Duplicated Questions"
    ADD CONSTRAINT "Duplicated Questions_University_id_fkey" FOREIGN KEY ("University_id") REFERENCES "public"."Universities"("University_id");



ALTER TABLE ONLY "public"."Exams"
    ADD CONSTRAINT "Exams_University_id_fkey" FOREIGN KEY ("University_id") REFERENCES "public"."Universities"("University_id");



ALTER TABLE ONLY "public"."Failed"
    ADD CONSTRAINT "Failed_Exam_id_fkey" FOREIGN KEY ("Exam_id") REFERENCES "public"."Exams"("Exam_id");



ALTER TABLE ONLY "public"."Failed"
    ADD CONSTRAINT "Failed_University_id_fkey" FOREIGN KEY ("University_id") REFERENCES "public"."Universities"("University_id");



ALTER TABLE ONLY "public"."Failed"
    ADD CONSTRAINT "Failed_uid_fkey" FOREIGN KEY ("uid") REFERENCES "public"."MedlinkStudentsDB"("uid");



ALTER TABLE ONLY "public"."Questions"
    ADD CONSTRAINT "Questions_Exam_id_fkey" FOREIGN KEY ("Exam_id") REFERENCES "public"."Exams"("Exam_id");



ALTER TABLE ONLY "public"."Questions"
    ADD CONSTRAINT "Questions_University_id_fkey" FOREIGN KEY ("University_id") REFERENCES "public"."Universities"("University_id");



ALTER TABLE ONLY "public"."Suceed"
    ADD CONSTRAINT "Suceed_Exam_id_fkey" FOREIGN KEY ("Exam_id") REFERENCES "public"."Exams"("Exam_id");



ALTER TABLE ONLY "public"."Suceed"
    ADD CONSTRAINT "Suceed_University_id_fkey" FOREIGN KEY ("University_id") REFERENCES "public"."Universities"("University_id");



ALTER TABLE ONLY "public"."Suceed"
    ADD CONSTRAINT "Suceed_uid_fkey" FOREIGN KEY ("uid") REFERENCES "public"."MedlinkStudentsDB"("uid");



ALTER TABLE ONLY "public"."MedlinkStudentsDB"
    ADD CONSTRAINT "public_MedlinkStudentsDB_University_id_fkey" FOREIGN KEY ("University_id") REFERENCES "public"."Universities"("University_id");



ALTER TABLE ONLY "public"."MedlinkStudentsDB"
    ADD CONSTRAINT "public_MedlinkStudentsDB_optionMat1_fkey" FOREIGN KEY ("optionMat1") REFERENCES "public"."Universities"("optionMat1");



ALTER TABLE ONLY "public"."MedlinkStudentsDB"
    ADD CONSTRAINT "public_MedlinkStudentsDB_optionMat2_fkey" FOREIGN KEY ("optionMat2") REFERENCES "public"."Universities"("optionMat2");



ALTER TABLE ONLY "public"."MedlinkStudentsDB"
    ADD CONSTRAINT "public_MedlinkStudentsDB_optionMat3_fkey" FOREIGN KEY ("optionMat3") REFERENCES "public"."Universities"("optionMat3");



ALTER TABLE ONLY "public"."MedlinkStudentsDB"
    ADD CONSTRAINT "public_MedlinkStudentsDB_optionMat4_fkey" FOREIGN KEY ("optionMat4") REFERENCES "public"."Universities"("optionMat4");



ALTER TABLE ONLY "public"."rating"
    ADD CONSTRAINT "rating_uid_fkey" FOREIGN KEY ("uid") REFERENCES "public"."MedlinkStudentsDB"("uid");



ALTER TABLE ONLY "public"."usersCrmId"
    ADD CONSTRAINT "usersCrmId_uid_fkey" FOREIGN KEY ("uid") REFERENCES "public"."MedlinkStudentsDB"("uid");



ALTER TABLE "public"."Duplicated Questions" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Duplicated questions" ON "public"."Duplicated Questions" USING (true) WITH CHECK (true);



CREATE POLICY "Enable insert for users based on user_id" ON "public"."MedlinkStudentsDB" USING (true) WITH CHECK (true);



ALTER TABLE "public"."Exams" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Exams" ON "public"."Exams" FOR SELECT USING (true);



ALTER TABLE "public"."Failed" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Failed Policy" ON "public"."Failed" USING (true);



ALTER TABLE "public"."Materials" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Materials" ON "public"."Materials" USING (true) WITH CHECK (true);



ALTER TABLE "public"."MedlinkStudentsDB" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Questions" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Questions" ON "public"."Questions" FOR SELECT USING (true);



ALTER TABLE "public"."Suceed" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Universities" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Universities" ON "public"."Universities" FOR SELECT USING (true);



ALTER TABLE "public"."University Details" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."appVersion" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "appVersion" ON "public"."appVersion" USING (true);



CREATE POLICY "crm" ON "public"."usersCrmId" USING (true);



CREATE POLICY "privacy" ON "public"."rating" USING (true);



ALTER TABLE "public"."rating" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "suceed" ON "public"."Suceed" USING (true);



ALTER TABLE "public"."usersCrmId" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."Duplicated Questions";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."Exams";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."MedlinkStudentsDB";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."Questions";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."rating";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."usersCrmId";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";









































































































































































































GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Duplicated Questions" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Duplicated Questions" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Duplicated Questions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Duplicated Questions_Question_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Duplicated Questions_Question_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Duplicated Questions_Question_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Exams" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Exams" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Exams" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Exams_Exam_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Exams_Exam_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Exams_Exam_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Failed" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Failed" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Failed" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Failed_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Failed_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Failed_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Materials" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Materials" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Materials" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Materials_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Materials_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Materials_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."MedlinkStudentsDB" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."MedlinkStudentsDB" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."MedlinkStudentsDB" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Questions" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Questions" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Questions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Questions_Question_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Questions_Question_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Questions_Question_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Suceed" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Suceed" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Suceed" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Suceed_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Suceed_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Suceed_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Universities" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Universities" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."Universities" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."University Details" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."University Details" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."University Details" TO "service_role";



GRANT ALL ON SEQUENCE "public"."University Details_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."University Details_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."University Details_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."appVersion" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."appVersion" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."appVersion" TO "service_role";



GRANT ALL ON SEQUENCE "public"."appVersion_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."appVersion_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."appVersion_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."rating" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."rating" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."rating" TO "service_role";



GRANT ALL ON SEQUENCE "public"."rating_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rating_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rating_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."usersCrmId" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."usersCrmId" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."usersCrmId" TO "service_role";



GRANT ALL ON SEQUENCE "public"."usersCrmId_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."usersCrmId_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."usersCrmId_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "service_role";






























\unrestrict 9uXl9TNmbRBw0H9BE9HGE1e5JeLbrMnMaec3ZUwpLCG9fzWVqdbTMBDAzvCpVA6

RESET ALL;
